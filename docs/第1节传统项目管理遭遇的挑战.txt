二零一八年，
西班牙萨瓦德尔银行在收购英国TSB银行后，
决定将其五百四十万客户的几十亿客户记录迁移到萨瓦德尔银行的IT系统中。
对项目管理人员而言，这是一个需要在规定时间完成的典型项目。
萨瓦德尔银行首席执行官瓜迪奥拉表示，
公司给这个项目投入了大量的人力，
其中一千多名专业人士参与其中，
这在欧洲的历史上是前所未有的。
但负责迁移工作的TSB员工却感到很紧张。
该项目原本需要花费十八个月的时间，可如今不仅进度落后，还超出了预算。
四月二十二日，项目正式开始启动。
但灾难开始发生，
有的人存在银行账户里的储蓄凭空消失；
有的人只是花费了很少一笔费用，
记录上却显示花费了数千美元；
有的人登陆上了别人的账户…
当时没人清楚到底发生了什么，银行花了数周来修复系统。
在此期间数百万人无法取款。
总共有十三亿条客户记录在迁移过程中出错了。
一年后，专家们终于找到了数据出错的根本原因：缺乏严格的测试。
虽然今天所谓的项目其实自古即有，但项目管理作为一门正式的管理分支学科其实出现在上个世纪中期。
二战之后，人类的科学技术水平上升到一个新的台阶。
无论是政府还是企业都开始从事越来越大型和复杂的项目，因此对项目的管理需求也越来越强烈了。
在传统的概念里，项目被认为是创造独特的产品、服务或成果的临时性工作。
这里的“临时性”是指项目有明确的起点和终点。
在发展早期，项目管理的重点在于预算和进度。
但随着项目管理在企业中应用越来越广泛，资源统筹的复杂性和项目的效率等问题也越来越明显。
因此，项目管理被看成是运用各种相关的知识、技能、工具和技术应用于项目活动，以满足项目的要求。
它往往有明确的目标，有明确的起始和终止日期，但又有经费和资源限制，并且往往是多职能的。
为解决这些问题，传统项目管理设计了一个启动、规划、执行、监控到最后收尾的线性流程。
这本质上是泰勒科学管理法在项目管理领域的实践。
其核心是通过对项目工作的分解，从而让项目相关人员在标准化的流程中完成指定的工作。
显然，
传统项目管理实际上要解决的是：如何在有一定时间、成本、绩效要求的指定活动中，
管理或控制企业资源？
在这里，范围、时间和成本就成为项目的关键约束因素。
对企业而言，如果增加项目范围，就必然有代价，要么增加时间，要么增加资源，通常就是加钱。
这也被称为“三重约束”。
然而，还有一个关键因素也会影响到项目的成败，这就是项目中的“人”。
而“三重约束”的前提假设是指同一个项目团队。
但实际上，两支不同的项目团队，即使面对的是同样的项目范围，他们完成的时间和成本就可能完全不同。
甚至换个项目经理，结果就会迥然不同。
但科学管理法的实质就是尽可能减少人对业务的影响。
这也是建立在科学管理法理论基础上的传统项目管理的本质性问题。
传统项目管理的流程和方法中缺乏对“人”的激励。
但事实上，“人”是项目中最关键的因素之一，“人”的积极性决定了项目的成败。
另一个挑战是需求的不确定性。
在传统项目管理流程中，确定项目范围是一项重要的工作，也是其他一切工作的基础。
例如建造一座房子，
由于技术是成熟的，
因此预算和计划往往都是明确的，
其结果就变成按计划准时的完成房屋建造项目。
在需求确定的情况下，一步一步顺序完成项目工作是一种显然的选择。
尤其是对硬件行业，产品一旦大规模生产，要再返回去修改非常困难，甚至是不可能的。
然而上个世纪末，这看似完美的项目管理工作构想在一个新兴的领域坍塌了。
这就是软件行业。
在上个世界末，软件行业普遍使用的是一种名为“瀑布模型”的开发流程。
它是在1970年由一位名叫温斯顿·罗伊斯的计算机科学家提出的。
这个模型让软件开发过程沿着一系列阶段顺序展开，
从需求开始，
依次通过设计、开发、集成、测试、维护等六个阶段，
项目开发进程从一个阶段“流动”到下一个阶段，
这也是“瀑布模型”名称的由来。
虽然罗伊斯当时其实已经意识到此模型的各种缺陷，并推荐原型法和迭代法来创建产品。
但实际上大量软件企业在实践中将“瀑布模型”当做了一个只有上一阶段完成后才可以开始下一阶段的线性流程。
然而，当时大量的软件项目都是第一次实施的项目。
事实上，在开发前没有人能真正准确知道开发出来的软件到底能实现哪些价值。
项目中的每个人，
无论是出资方，
开发方，
无论是用户、产品经理、开发工程师、设计师或者项目经理，
对结果其实都处于疯狂想象状态。
在这种情况下，试图一开始就将需求梳理清楚是不可能的。
也因此，在计划阶段设计的功能和客户真正的需求往往存在脱节。
于是在开发过程中，客户往往会频繁提出更改需求的要求，但这就意味着项目不能按计划完成。
因此，开发团队害怕甚至会抵制需求的变更。
在传统项目管理模式下，项目经理的核心职能就是按计划准时完成项目。
然而实际世界中，
软件项目的需求会不断发生变化，
导致项目进度不断拖延，
这时候，
为了保准项目准时交付，
往往只能压缩测试环节。
而测试环节一旦被压缩，最后交付的产品就存在一大堆Bug。
于是灾难就发生了。
这种混乱的局面绝非孤例。
事实上，大量软件项目最后都以拖延或失败告终。
而项目经理也毫无疑问成为了“背锅侠”。
也正因如此，一场项目管理领域的革命最早在软件领域开始兴起。